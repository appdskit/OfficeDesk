rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth.token.email in ['appdskit@gmail.com', 'itdskalmunai@gmail.com'];
    }

    // Helper function to get user's role data
    function getRoleData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Helper function to check for specific permissions
    function hasPermission(resource, operation) {
        let roleId = getRoleData().roleId;
        // Ensure roleId is not null before trying to access it
        if (roleId != null) {
            let userPermissions = get(/databases/$(database)/documents/roles/$(roleId)).data.permissions;
            return resource in userPermissions && operation in userPermissions[resource];
        }
        return false;
    }


    // Users can only read their own profile, admins can read all
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId || isAdmin();
      allow create: if request.auth != null; // Allows new user creation
    }

    // StaffProfiles can be created by the user, read by any authenticated user, updated only by creator/admin
    match /staffProfiles/{profileId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.resource.data.createdBy == request.auth.uid;
      allow update: if request.auth != null && resource.data.createdBy == request.auth.uid || isAdmin();
    }
    
    // Divisions can be read by any authenticated user, managed by admins
    match /divisions/{divisionId} {
       allow read: if request.auth != null;
       allow write: if isAdmin();
    }
    
    // Roles can be read by any authenticated user, managed by admins
    match /roles/{roleId} {
       allow read: if request.auth != null;
       allow write: if isAdmin();
    }
    
    // Leave Balances can be read by the owner or those with permission, managed by permission holders
    match /leaveBalances/{userId} {
        allow read: if request.auth.uid == userId || hasPermission('leave', 'view_summary');
        allow write: if hasPermission('leave', 'manage_balance');
    }
    
    // Leave Applications have more complex rules
    match /leaveApplications/{applicationId} {
      allow read: if request.auth != null; // Allow any authenticated user to read (queries will filter)
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      
      // Allow updates for cancellation or by authorized actors (recommender, approver, etc.)
      allow update: if (request.auth != null && 
                      (resource.data.userId == request.auth.uid && request.resource.data.status == 'Cancelled') ||
                      (resource.data.recommenderId == request.auth.uid && resource.data.status in ['Pending', 'Acting Rejected']) ||
                      (resource.data.approverId == request.auth.uid && resource.data.status == 'Recommended') ||
                      (resource.data.actingOfficerId == request.auth.uid && resource.data.status == 'Pending Acting Acceptance') ||
                      isAdmin()
                    );
    }
  }
}
