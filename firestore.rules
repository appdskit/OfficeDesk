rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Function to check if a user has a specific permission
    function hasPermission(resource, action) {
      // Get the user's role from their user document
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roleId;
      // Get the permissions for that role
      let rolePermissions = get(/databases/$(database)/documents/roles/$(userRole)).data.permissions;
      
      // Check if the permission exists
      return rolePermissions[resource].hasAny([action]);
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // COLLECTIONS
    match /divisions/{divisionId} {
      allow read: if isAuth();
      allow write: if hasPermission('division', 'create') || hasPermission('division', 'update') || hasPermission('division', 'delete');
    }

    match /roles/{roleId} {
      allow read: if isAuth();
      allow write: if hasPermission('role', 'create') || hasPermission('role', 'update') || hasPermission('role', 'delete');
    }

    match /users/{userId} {
      // Users can read/update their own profile
      allow read, update: if isOwner(userId);
      // Allow user creation
      allow create: if hasPermission('user', 'create');
       // Allow users with summary view to read all user profiles
      allow list: if hasPermission('leave', 'view_summary');
    }

    match /staffProfiles/{profileId} {
      allow create: if isAuth() && request.resource.data.createdBy == request.auth.uid;
      allow read, update: if isAuth() && request.auth.uid == resource.data.createdBy;
      allow list: if hasPermission('staff', 'view');
    }
    
    match /leaveBalances/{balanceId} {
        allow read: if isAuth() && (isOwner(balanceId.split('_')[0]) || hasPermission('leave', 'view_summary'));
        allow list: if hasPermission('leave', 'view_summary');
        allow write: if hasPermission('leave', 'manage_balance');
    }

    match /leaveApplications/{applicationId} {
      allow create: if isAuth() && request.resource.data.userId == request.auth.uid;
      
      allow read: if isAuth() && 
                  (resource.data.userId == request.auth.uid || 
                   resource.data.recommenderId == request.auth.uid || 
                   resource.data.approverId == request.auth.uid ||
                   resource.data.actingOfficerId == request.auth.uid);

      allow list: if hasPermission('leave', 'view_summary');

      allow update: if isAuth() && 
                    ( 
                      // User can cancel their own pending application
                      (request.resource.data.status == 'Cancelled' && resource.data.userId == request.auth.uid) ||
                      // Actors can update status
                      (resource.data.status == 'Pending Acting Acceptance' && resource.data.actingOfficerId == request.auth.uid) ||
                      (resource.data.status == 'Pending' && resource.data.recommenderId == request.auth.uid) ||
                      (resource.data.status == 'Recommended' && resource.data.approverId == request.auth.uid) ||
                      // HOD can approve/reject any recommended application
                      (resource.data.status == 'Recommended' && hasPermission('leave', 'approve'))
                    );
    }
  }
}
